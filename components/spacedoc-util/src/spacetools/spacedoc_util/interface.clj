(ns spacetools.spacedoc-util.interface
  (:require [spacetools.spacedoc-util.core :as u]))

(def seps u/seps)
(def seps-right u/seps-right)
(def seps-left  u/seps-left)
(def link-type->prefix u/link-type->prefix)
(def link-types u/link-types)
(def max-headline-depth u/max-headline-depth)
(def children-tag-s u/children-tag-s)
(defn register-node! [tag spec-k] (u/register-node! tag spec-k))
(defn node->spec-k [node] (u/node->spec-k node))
(defn tag->spec-k [node-tag] (u/tag->spec-k node-tag))
(defn all-tags [] (u/all-tags))
(defn known-node? [tag] (u/known-node? tag))
(defn link->link-prefix [path] (u/link->link-prefix path))
(defn fmt-problem [node problem] (u/fmt-problem node problem))
(defn explain-deepest [node] (u/explain-deepest node))
(defn relation [parent] (u/relation parent))
(defn relations [parents] (u/relations parents))
(defn same-row-length? [table-children] (u/same-row-length? table-children))
(defn hl-val->gh-id-base [hl-value] (u/hl-val->gh-id-base hl-value))
(defn hl-val->path-id-frag [hl-value] (u/hl-val->path-id-frag hl-value))
(defn path-id? [val] (u/path-id? val))
(defn up-tags [spaceroot file root-node] (u/up-tags spaceroot file root-node))
(defn fill-hl ([hl] (u/fill-hl hl)) ([p-hl hl] (u/fill-hl p-hl hl)))
