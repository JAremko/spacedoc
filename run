#!/usr/bin/env bash

cd "$(dirname "$0")"

action="$1"
shift
first_arg="$1"
shift

print_help () {
read -d '' help <<- EOF
  Spacemacs documentation tools

  usage: run ACTION [ARGS]...

  Actions:
    validate ROOT [INPUTS]... Validate Spacemacs documentation files.
                              If only the first argument is supplied
                              the default list of documentation files
                              will be used.
    format   ROOT [INPUTS]... Format Spacemacs documentation files.
                              If only the first argument is supplied
                              all files in ROOT folder will be formatted.

  Common arguments:
    ROOT   root directory of Spacemacs documentation. Example: "~/.emacs.d/".
    INPUTS are processed .org files or directories containing them.
EOF
echo "$help"
}

echo_headline () {
    printf '=%.0s' {1..70}
    printf "\n$1\n"
    printf '=%.0s' {1..70}
    echo
}

case $action in
"")
    print_help
    exit 2
    ;;
-h|--help)
    print_help
    exit 0
    ;;
esac

case $@ in
-h|--help)
    print_help
    exit 0
    ;;
esac

tmp_dir="/tmp/spacetools/"
rm -rf "${tmp_dir}"
sdnize_args=("${first_arg}" "${tmp_dir}" "${@}")

case $action in
validate)
    cd ./spacedoc
    echo_headline "Exporting documentation for validation:"
    emacs -batch -l ./sdnize/sdnize.el -no-site-file -q "${sdnize_args[@]}"
    echo_headline "Validating documentation:"
    spacedoc validate "${tmp_dir}"
    exit $?
    ;;
format)
    cd ./spacedoc
    docfmt_args="${@}"
    if [[ -z "${docfmt_args// }" ]]; then
        docfmt_args="${first_arg}"
    fi
    echo_headline "Preforming documentation with Emacs tools for export:"
    emacs -batch -l ./docfmt/docfmt.el -no-site-file -q "${docfmt_args}"
    echo_headline "Exporting documentation for formatting with Clojure tools:"
    emacs -batch -l ./sdnize/sdnize.el -no-site-file -q "${sdnize_args[@]}"
    echo_headline "Importing documentation back into .org format:"
    spacedoc orgify "${tmp_dir}" "${first_arg}"
    exit $?
    ;;
*)
   print_help
   exit 2
  ;;
esac
